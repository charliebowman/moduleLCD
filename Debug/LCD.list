
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e78  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002044  08002044  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002044  08002044  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002044  08002044  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002048  08002048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800204c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002058  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002058  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad57  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180c  00000000  00000000  0002ad93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5f8  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b67a  00000000  00000000  0004d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c19f5  00000000  00000000  0005871a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a10f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  0011a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001fec 	.word	0x08001fec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001fec 	.word	0x08001fec

080001cc <LCD_PutNibble>:
#define LCD_D4 5 	// GPIO pin for DB 4
#define LCD_D5 6 	// GPIO pin for DB 5
#define LCD_D6 7 	// GPIO pin for DB 6
#define LCD_D7 2 	// GPIO pin for DB 7

void LCD_PutNibble(uint8_t c) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]

	if (c & 0x08)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 0308 	and.w	r3, r3, #8
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d008      	beq.n	80001f2 <LCD_PutNibble+0x26>
		LCD_Port->ODR |= 1<<LCD_D7;
 80001e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6153      	str	r3, [r2, #20]
 80001f0:	e007      	b.n	8000202 <LCD_PutNibble+0x36>
	else
		LCD_Port->ODR &= ~(1<<LCD_D7);
 80001f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fc:	f023 0304 	bic.w	r3, r3, #4
 8000200:	6153      	str	r3, [r2, #20]

	if (c & 0x04)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	2b00      	cmp	r3, #0
 800020a:	d008      	beq.n	800021e <LCD_PutNibble+0x52>
		LCD_Port->ODR |= 1<<LCD_D6;
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800021a:	6153      	str	r3, [r2, #20]
 800021c:	e007      	b.n	800022e <LCD_PutNibble+0x62>
	else
		LCD_Port->ODR &= ~(1<<LCD_D6);
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800022c:	6153      	str	r3, [r2, #20]

	if (c & 0x02)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	2b00      	cmp	r3, #0
 8000236:	d008      	beq.n	800024a <LCD_PutNibble+0x7e>
		LCD_Port->ODR |= 1<<LCD_D5;
 8000238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000246:	6153      	str	r3, [r2, #20]
 8000248:	e007      	b.n	800025a <LCD_PutNibble+0x8e>
	else
		LCD_Port->ODR &= ~(1<<LCD_D5);
 800024a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000258:	6153      	str	r3, [r2, #20]

	if (c & 0x01)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d008      	beq.n	8000276 <LCD_PutNibble+0xaa>
		LCD_Port->ODR |= 1<<LCD_D4;
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6153      	str	r3, [r2, #20]
	else
		LCD_Port->ODR &= ~(1<<LCD_D4);

}
 8000274:	e007      	b.n	8000286 <LCD_PutNibble+0xba>
		LCD_Port->ODR &= ~(1<<LCD_D4);
 8000276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000280:	f023 0320 	bic.w	r3, r3, #32
 8000284:	6153      	str	r3, [r2, #20]
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <LCD_Pulse>:

void LCD_Pulse(void) {
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0

	LCD_Port->ODR |= 1<<LCD_EN;
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fb14 	bl	80008d4 <HAL_Delay>
	LCD_Port->ODR &= ~(1<<LCD_EN);
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f023 0310 	bic.w	r3, r3, #16
 80002ba:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fb09 	bl	80008d4 <HAL_Delay>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c) {
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b082      	sub	sp, #8
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]

	// RS: 0 = command, 1 = data
	LCD_Port->ODR &= ~(1<<LCD_RS);
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f023 0302 	bic.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]

	// Send Upper 4 bits
	LCD_PutNibble( c >> 4 );
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	091b      	lsrs	r3, r3, #4
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff70 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 80002ec:	f7ff ffd1 	bl	8000292 <LCD_Pulse>

	// Send Lower 4 bits
	LCD_PutNibble( c & 0x0F );
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff67 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 80002fe:	f7ff ffc8 	bl	8000292 <LCD_Pulse>

	// Return to default
	LCD_Port->ODR |= 1<<LCD_RS;
 8000302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	6153      	str	r3, [r2, #20]
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <LCD_SendData>:

void LCD_SendData(uint8_t c) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]

	// RS defaults to 1
	// No need to change RS

	// Send Upper 4 bits
	LCD_PutNibble( c >> 4 );
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	091b      	lsrs	r3, r3, #4
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff4e 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 8000330:	f7ff ffaf 	bl	8000292 <LCD_Pulse>

	// Send Lower 4 bits
	LCD_PutNibble( c & 0x0F );
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff45 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 8000342:	f7ff ffa6 	bl	8000292 <LCD_Pulse>


}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <LCD_Init>:

void LCD_Init(void) {
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000352:	2014      	movs	r0, #20
 8000354:	f000 fabe 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x30);
 8000358:	2030      	movs	r0, #48	; 0x30
 800035a:	f7ff ffb4 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 800035e:	2005      	movs	r0, #5
 8000360:	f000 fab8 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x30);
 8000364:	2030      	movs	r0, #48	; 0x30
 8000366:	f7ff ffae 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 800036a:	2005      	movs	r0, #5
 800036c:	f000 fab2 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x30);
 8000370:	2030      	movs	r0, #48	; 0x30
 8000372:	f7ff ffa8 	bl	80002c6 <LCD_SendCmd>

	// 4 bit mode
	HAL_Delay(5);
 8000376:	2005      	movs	r0, #5
 8000378:	f000 faac 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x20);
 800037c:	2020      	movs	r0, #32
 800037e:	f7ff ffa2 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 8000382:	2005      	movs	r0, #5
 8000384:	f000 faa6 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x2C);
 8000388:	202c      	movs	r0, #44	; 0x2c
 800038a:	f7ff ff9c 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 800038e:	2005      	movs	r0, #5
 8000390:	f000 faa0 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x08);
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff ff96 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 800039a:	2005      	movs	r0, #5
 800039c:	f000 fa9a 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x01);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f7ff ff90 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 80003a6:	2005      	movs	r0, #5
 80003a8:	f000 fa94 	bl	80008d4 <HAL_Delay>
	LCD_SendCmd(0x06);
 80003ac:	2006      	movs	r0, #6
 80003ae:	f7ff ff8a 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 80003b2:	2005      	movs	r0, #5
 80003b4:	f000 fa8e 	bl	80008d4 <HAL_Delay>

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 fa13 	bl	80007ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f878 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 f910 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 80003cc:	f000 f8ba 	bl	8000544 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80003d0:	f7ff ffbd 	bl	800034e <LCD_Init>
  LCD_Pulse();
 80003d4:	f7ff ff5d 	bl	8000292 <LCD_Pulse>

  LCD_SendCmd(0x01);
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ff74 	bl	80002c6 <LCD_SendCmd>

  // Send Hello
  LCD_SendData(0x48);
 80003de:	2048      	movs	r0, #72	; 0x48
 80003e0:	f7ff ff9b 	bl	800031a <LCD_SendData>
  LCD_SendData(0x65);
 80003e4:	2065      	movs	r0, #101	; 0x65
 80003e6:	f7ff ff98 	bl	800031a <LCD_SendData>
  LCD_SendData(0x6C);
 80003ea:	206c      	movs	r0, #108	; 0x6c
 80003ec:	f7ff ff95 	bl	800031a <LCD_SendData>
  LCD_SendData(0x6C);
 80003f0:	206c      	movs	r0, #108	; 0x6c
 80003f2:	f7ff ff92 	bl	800031a <LCD_SendData>
  LCD_SendData(0x6F);
 80003f6:	206f      	movs	r0, #111	; 0x6f
 80003f8:	f7ff ff8f 	bl	800031a <LCD_SendData>

  LCD_SendData(0x20);
 80003fc:	2020      	movs	r0, #32
 80003fe:	f7ff ff8c 	bl	800031a <LCD_SendData>

  // Send my
  LCD_SendData(0x6D);
 8000402:	206d      	movs	r0, #109	; 0x6d
 8000404:	f7ff ff89 	bl	800031a <LCD_SendData>
  LCD_SendData(0x79);
 8000408:	2079      	movs	r0, #121	; 0x79
 800040a:	f7ff ff86 	bl	800031a <LCD_SendData>

  LCD_SendData(0x20);
 800040e:	2020      	movs	r0, #32
 8000410:	f7ff ff83 	bl	800031a <LCD_SendData>

  // Send little
  LCD_SendData(0x6C);
 8000414:	206c      	movs	r0, #108	; 0x6c
 8000416:	f7ff ff80 	bl	800031a <LCD_SendData>
  LCD_SendData(0x69);
 800041a:	2069      	movs	r0, #105	; 0x69
 800041c:	f7ff ff7d 	bl	800031a <LCD_SendData>
  LCD_SendData(0x74);
 8000420:	2074      	movs	r0, #116	; 0x74
 8000422:	f7ff ff7a 	bl	800031a <LCD_SendData>
  LCD_SendData(0x74);
 8000426:	2074      	movs	r0, #116	; 0x74
 8000428:	f7ff ff77 	bl	800031a <LCD_SendData>
  LCD_SendData(0x6C);
 800042c:	206c      	movs	r0, #108	; 0x6c
 800042e:	f7ff ff74 	bl	800031a <LCD_SendData>
  LCD_SendData(0x65);
 8000432:	2065      	movs	r0, #101	; 0x65
 8000434:	f7ff ff71 	bl	800031a <LCD_SendData>

  LCD_SendCmd(0xC0);
 8000438:	20c0      	movs	r0, #192	; 0xc0
 800043a:	f7ff ff44 	bl	80002c6 <LCD_SendCmd>

  // Send friend
  LCD_SendData(0x66);
 800043e:	2066      	movs	r0, #102	; 0x66
 8000440:	f7ff ff6b 	bl	800031a <LCD_SendData>
  LCD_SendData(0x72);
 8000444:	2072      	movs	r0, #114	; 0x72
 8000446:	f7ff ff68 	bl	800031a <LCD_SendData>
  LCD_SendData(0x69);
 800044a:	2069      	movs	r0, #105	; 0x69
 800044c:	f7ff ff65 	bl	800031a <LCD_SendData>
  LCD_SendData(0x65);
 8000450:	2065      	movs	r0, #101	; 0x65
 8000452:	f7ff ff62 	bl	800031a <LCD_SendData>
  LCD_SendData(0x6E);
 8000456:	206e      	movs	r0, #110	; 0x6e
 8000458:	f7ff ff5f 	bl	800031a <LCD_SendData>
  LCD_SendData(0x64);
 800045c:	2064      	movs	r0, #100	; 0x64
 800045e:	f7ff ff5c 	bl	800031a <LCD_SendData>

  // Select CG-RAM and set address to 0x00
  LCD_SendCmd(0x40 + 0x00);
 8000462:	2040      	movs	r0, #64	; 0x40
 8000464:	f7ff ff2f 	bl	80002c6 <LCD_SendCmd>
  HAL_Delay(4);
 8000468:	2004      	movs	r0, #4
 800046a:	f000 fa33 	bl	80008d4 <HAL_Delay>

  // Define smile face
  LCD_SendData(0x00);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff53 	bl	800031a <LCD_SendData>
  LCD_SendData(0x0A);
 8000474:	200a      	movs	r0, #10
 8000476:	f7ff ff50 	bl	800031a <LCD_SendData>
  LCD_SendData(0x0A);
 800047a:	200a      	movs	r0, #10
 800047c:	f7ff ff4d 	bl	800031a <LCD_SendData>
  LCD_SendData(0x0A);
 8000480:	200a      	movs	r0, #10
 8000482:	f7ff ff4a 	bl	800031a <LCD_SendData>
  LCD_SendData(0x00);
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ff47 	bl	800031a <LCD_SendData>
  LCD_SendData(0x11);
 800048c:	2011      	movs	r0, #17
 800048e:	f7ff ff44 	bl	800031a <LCD_SendData>
  LCD_SendData(0x0E);
 8000492:	200e      	movs	r0, #14
 8000494:	f7ff ff41 	bl	800031a <LCD_SendData>
  LCD_SendData(0x00);
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ff3e 	bl	800031a <LCD_SendData>

  // Select display RAM & set address to 0
  LCD_SendCmd(0xC7);
 800049e:	20c7      	movs	r0, #199	; 0xc7
 80004a0:	f7ff ff11 	bl	80002c6 <LCD_SendCmd>
  HAL_Delay(4);
 80004a4:	2004      	movs	r0, #4
 80004a6:	f000 fa15 	bl	80008d4 <HAL_Delay>

  // Display smile face
  LCD_SendData(0x00);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ff35 	bl	800031a <LCD_SendData>

  LCD_SendCmd(0x0C);
 80004b0:	200c      	movs	r0, #12
 80004b2:	f7ff ff08 	bl	80002c6 <LCD_SendCmd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <main+0xfa>

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2244      	movs	r2, #68	; 0x44
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fd88 	bl	8001fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004da:	2310      	movs	r3, #16
 80004dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fcde 	bl	8000eb4 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80004fe:	f000 f8a5 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f8ea 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000526:	f000 f891 	bl	800064c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052e:	f000 fc6b 	bl	8000e08 <HAL_PWREx_ControlVoltageScaling>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000538:	f000 f888 	bl	800064c <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3758      	adds	r7, #88	; 0x58
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <MX_TIM1_Init+0xa4>)
 8000566:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_TIM1_Init+0xa0>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_TIM1_Init+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_TIM1_Init+0xa0>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800058e:	4815      	ldr	r0, [pc, #84]	; (80005e4 <MX_TIM1_Init+0xa0>)
 8000590:	f001 fa7e 	bl	8001a90 <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800059a:	f000 f857 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_TIM1_Init+0xa0>)
 80005ac:	f001 fac7 	bl	8001b3e <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005b6:	f000 f849 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <MX_TIM1_Init+0xa0>)
 80005cc:	f001 fc7c 	bl	8001ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005d6:	f000 f839 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40012c00 	.word	0x40012c00

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_GPIO_Init+0x5c>)
 800060e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000618:	2200      	movs	r2, #0
 800061a:	21fe      	movs	r1, #254	; 0xfe
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f000 fbcc 	bl	8000dbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000624:	23fe      	movs	r3, #254	; 0xfe
 8000626:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fa54 	bl	8000ae8 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6613      	str	r3, [r2, #96]	; 0x60
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x44>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_TIM_Base_MspInit+0x38>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006bc:	6613      	str	r3, [r2, #96]	; 0x60
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40012c00 	.word	0x40012c00
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f8b2 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x5c>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <SystemInit+0x5c>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SystemInit+0x60>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <SystemInit+0x60>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <SystemInit+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <SystemInit+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <SystemInit+0x60>)
 8000760:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000764:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <SystemInit+0x60>)
 800076c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000770:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <SystemInit+0x60>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SystemInit+0x60>)
 8000778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SystemInit+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	40021000 	.word	0x40021000

08000798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff ffca 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007a2:	e003      	b.n	80007ac <LoopCopyDataInit>

080007a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007aa:	3104      	adds	r1, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80007b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007b4:	d3f6      	bcc.n	80007a4 <CopyDataInit>
	ldr	r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007b8:	e002      	b.n	80007c0 <LoopFillZerobss>

080007ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007bc:	f842 3b04 	str.w	r3, [r2], #4

080007c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LoopForever+0x16>)
	cmp	r2, r3
 80007c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007c4:	d3f9      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f001 fbe5 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ca:	f7ff fdf7 	bl	80003bc <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80007d4:	0800204c 	.word	0x0800204c
	ldr	r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007dc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007e4:	20000078 	.word	0x20000078

080007e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_IRQHandler>

080007ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f943 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f80e 	bl	800081c <HAL_InitTick>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e001      	b.n	8000810 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800080c:	f7ff ff24 	bl	8000658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000810:	79fb      	ldrb	r3, [r7, #7]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <HAL_InitTick+0x6c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d023      	beq.n	8000878 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_InitTick+0x70>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_InitTick+0x6c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f941 	bl	8000ace <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10f      	bne.n	8000872 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d809      	bhi.n	800086c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f919 	bl	8000a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_InitTick+0x74>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	e007      	b.n	800087c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	e004      	b.n	800087c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e001      	b.n	800087c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	20000000 	.word	0x20000000
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000074 	.word	0x20000074

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000074 	.word	0x20000074

080008d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008dc:	f7ff ffee 	bl	80008bc <HAL_GetTick>
 80008e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ec:	d005      	beq.n	80008fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_Delay+0x44>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fa:	bf00      	nop
 80008fc:	f7ff ffde 	bl	80008bc <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d8f7      	bhi.n	80008fc <HAL_Delay+0x28>
  {
  }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	; (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	; 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff47 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff5c 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff8e 	bl	80009d4 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5d 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffb0 	bl	8000a3c <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e148      	b.n	8000d8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	2101      	movs	r1, #1
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 813a 	beq.w	8000d84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d00b      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	2b11      	cmp	r3, #17
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b12      	cmp	r3, #18
 8000b2e:	d130      	bne.n	8000b92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	f003 0201 	and.w	r2, r3, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0xea>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d123      	bne.n	8000c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	6939      	ldr	r1, [r7, #16]
 8000c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0203 	and.w	r2, r3, #3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8094 	beq.w	8000d84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5c:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c60:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6613      	str	r3, [r2, #96]	; 0x60
 8000c68:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c74:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <HAL_GPIO_Init+0x2c4>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c9e:	d00d      	beq.n	8000cbc <HAL_GPIO_Init+0x1d4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d007      	beq.n	8000cb8 <HAL_GPIO_Init+0x1d0>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <HAL_GPIO_Init+0x2cc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d101      	bne.n	8000cb4 <HAL_GPIO_Init+0x1cc>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_Init+0x1d6>
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x1d6>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_Init+0x1d6>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cce:	4937      	ldr	r1, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cdc:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f47f aeaf 	bne.w	8000af8 <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dcc:	787b      	ldrb	r3, [r7, #1]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40007000 	.word	0x40007000

08000e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e16:	d130      	bne.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e24:	d038      	beq.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2232      	movs	r2, #50	; 0x32
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9b      	lsrs	r3, r3, #18
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4c:	e002      	b.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	d102      	bne.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f2      	bne.n	8000e4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e74:	d110      	bne.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e00f      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e86:	d007      	beq.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e90:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	431bde83 	.word	0x431bde83

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f000 bc11 	b.w	80016ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ec8:	4ba0      	ldr	r3, [pc, #640]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed2:	4b9e      	ldr	r3, [pc, #632]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80e4 	beq.w	80010b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_RCC_OscConfig+0x4c>
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	f040 808b 	bne.w	800100e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	f040 8087 	bne.w	800100e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f00:	4b92      	ldr	r3, [pc, #584]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <HAL_RCC_OscConfig+0x64>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e3e8      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	4b8b      	ldr	r3, [pc, #556]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <HAL_RCC_OscConfig+0x7e>
 8000f28:	4b88      	ldr	r3, [pc, #544]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f30:	e005      	b.n	8000f3e <HAL_RCC_OscConfig+0x8a>
 8000f32:	4b86      	ldr	r3, [pc, #536]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d223      	bcs.n	8000f8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fd42 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e3c9      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f56:	4b7d      	ldr	r3, [pc, #500]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7c      	ldr	r2, [pc, #496]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b7a      	ldr	r3, [pc, #488]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4977      	ldr	r1, [pc, #476]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f74:	4b75      	ldr	r3, [pc, #468]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	4972      	ldr	r1, [pc, #456]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
 8000f88:	e025      	b.n	8000fd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8a:	4b70      	ldr	r3, [pc, #448]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6f      	ldr	r2, [pc, #444]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6d      	ldr	r3, [pc, #436]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	496a      	ldr	r1, [pc, #424]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa8:	4b68      	ldr	r3, [pc, #416]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	4965      	ldr	r1, [pc, #404]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fd02 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e389      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fd6:	f000 fc6f 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b5b      	ldr	r3, [pc, #364]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	495a      	ldr	r1, [pc, #360]	; (8001150 <HAL_RCC_OscConfig+0x29c>)
 8000fe8:	5ccb      	ldrb	r3, [r1, r3]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff2:	4a58      	ldr	r2, [pc, #352]	; (8001154 <HAL_RCC_OscConfig+0x2a0>)
 8000ff4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ff6:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_RCC_OscConfig+0x2a4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc0e 	bl	800081c <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d052      	beq.n	80010b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	e36d      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d032      	beq.n	800107c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc4b 	bl	80008bc <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102a:	f7ff fc47 	bl	80008bc <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e356      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3f      	ldr	r2, [pc, #252]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b3d      	ldr	r3, [pc, #244]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	493a      	ldr	r1, [pc, #232]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
 800107a:	e01a      	b.n	80010b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a32      	ldr	r2, [pc, #200]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc18 	bl	80008bc <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001090:	f7ff fc14 	bl	80008bc <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e323      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_RCC_OscConfig+0x298>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x1dc>
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d073      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_OscConfig+0x21c>
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b0c      	cmp	r3, #12
 80010c8:	d10e      	bne.n	80010e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d10b      	bne.n	80010e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_RCC_OscConfig+0x298>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d063      	beq.n	80011a4 <HAL_RCC_OscConfig+0x2f0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d15f      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e300      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d106      	bne.n	8001100 <HAL_RCC_OscConfig+0x24c>
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_RCC_OscConfig+0x298>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_RCC_OscConfig+0x298>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01d      	b.n	800113c <HAL_RCC_OscConfig+0x288>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x270>
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x288>
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_RCC_OscConfig+0x298>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_RCC_OscConfig+0x298>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d01b      	beq.n	800117c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fbba 	bl	80008bc <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	e010      	b.n	800116e <HAL_RCC_OscConfig+0x2ba>
 800114c:	40021000 	.word	0x40021000
 8001150:	08002004 	.word	0x08002004
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fbae 	bl	80008bc <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e2bd      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116e:	4baf      	ldr	r3, [pc, #700]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x2a8>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fb9e 	bl	80008bc <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fb9a 	bl	80008bc <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e2a9      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001196:	4ba5      	ldr	r3, [pc, #660]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x2d0>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d060      	beq.n	8001274 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x310>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d119      	bne.n	80011f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d116      	bne.n	80011f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c4:	4b99      	ldr	r3, [pc, #612]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_OscConfig+0x328>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e286      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	061b      	lsls	r3, r3, #24
 80011ea:	4990      	ldr	r1, [pc, #576]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f0:	e040      	b.n	8001274 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d023      	beq.n	8001242 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fa:	4b8c      	ldr	r3, [pc, #560]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a8b      	ldr	r2, [pc, #556]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fb59 	bl	80008bc <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fb55 	bl	80008bc <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e264      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001220:	4b82      	ldr	r3, [pc, #520]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	061b      	lsls	r3, r3, #24
 800123a:	497c      	ldr	r1, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	e018      	b.n	8001274 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a79      	ldr	r2, [pc, #484]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800124c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fb35 	bl	80008bc <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fb31 	bl	80008bc <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e240      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d03c      	beq.n	80012fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01c      	beq.n	80012c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	4a67      	ldr	r2, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fb10 	bl	80008bc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fb0c 	bl	80008bc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e21b      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b2:	4b5e      	ldr	r3, [pc, #376]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ef      	beq.n	80012a0 <HAL_RCC_OscConfig+0x3ec>
 80012c0:	e01b      	b.n	80012fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80012c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d2:	f7ff faf3 	bl	80008bc <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff faef 	bl	80008bc <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e1fe      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80012ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ef      	bne.n	80012da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80a6 	beq.w	8001454 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10d      	bne.n	8001334 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
 8001324:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001330:	2301      	movs	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_RCC_OscConfig+0x57c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d118      	bne.n	8001372 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_RCC_OscConfig+0x57c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_RCC_OscConfig+0x57c>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134c:	f7ff fab6 	bl	80008bc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001354:	f7ff fab2 	bl	80008bc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1c1      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_RCC_OscConfig+0x57c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_RCC_OscConfig+0x4d8>
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001380:	4a2a      	ldr	r2, [pc, #168]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800138a:	e024      	b.n	80013d6 <HAL_RCC_OscConfig+0x522>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d110      	bne.n	80013b6 <HAL_RCC_OscConfig+0x502>
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_RCC_OscConfig+0x578>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x578>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013b4:	e00f      	b.n	80013d6 <HAL_RCC_OscConfig+0x522>
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d016      	beq.n	800140c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff fa6d 	bl	80008bc <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fa69 	bl	80008bc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e176      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x578>)
 80013fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0ed      	beq.n	80013e6 <HAL_RCC_OscConfig+0x532>
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fa56 	bl	80008bc <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001412:	e00f      	b.n	8001434 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001414:	f7ff fa52 	bl	80008bc <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d906      	bls.n	8001434 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e15f      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001434:	4baa      	ldr	r3, [pc, #680]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1e8      	bne.n	8001414 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001442:	7ffb      	ldrb	r3, [r7, #31]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4ba5      	ldr	r3, [pc, #660]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	4aa4      	ldr	r2, [pc, #656]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800144e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03c      	beq.n	80014da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001468:	4b9d      	ldr	r3, [pc, #628]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800146a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146e:	4a9c      	ldr	r2, [pc, #624]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fa20 	bl	80008bc <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001480:	f7ff fa1c 	bl	80008bc <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e12b      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001492:	4b93      	ldr	r3, [pc, #588]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ef      	beq.n	8001480 <HAL_RCC_OscConfig+0x5cc>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014a2:	4b8f      	ldr	r3, [pc, #572]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80014a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a8:	4a8d      	ldr	r2, [pc, #564]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fa03 	bl	80008bc <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ba:	f7ff f9ff 	bl	80008bc <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e10e      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014cc:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80014ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ef      	bne.n	80014ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8102 	beq.w	80016e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	f040 80c5 	bne.w	8001678 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014ee:	4b7c      	ldr	r3, [pc, #496]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 0203 	and.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	429a      	cmp	r2, r3
 8001500:	d12c      	bne.n	800155c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	3b01      	subs	r3, #1
 800150e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d123      	bne.n	800155c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d11b      	bne.n	800155c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d113      	bne.n	800155c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d109      	bne.n	800155c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d067      	beq.n	800162c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d062      	beq.n	8001628 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001562:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0bb      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a5a      	ldr	r2, [pc, #360]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800157e:	f7ff f99d 	bl	80008bc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff f999 	bl	80008bc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0a8      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001598:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <HAL_RCC_OscConfig+0x830>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b4:	3a01      	subs	r2, #1
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	4311      	orrs	r1, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015be:	0212      	lsls	r2, r2, #8
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015c6:	0852      	lsrs	r2, r2, #1
 80015c8:	3a01      	subs	r2, #1
 80015ca:	0552      	lsls	r2, r2, #21
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015d2:	0852      	lsrs	r2, r2, #1
 80015d4:	3a01      	subs	r2, #1
 80015d6:	0652      	lsls	r2, r2, #25
 80015d8:	4311      	orrs	r1, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015de:	06d2      	lsls	r2, r2, #27
 80015e0:	430a      	orrs	r2, r1
 80015e2:	493f      	ldr	r1, [pc, #252]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015e8:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a3c      	ldr	r2, [pc, #240]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001600:	f7ff f95c 	bl	80008bc <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff f958 	bl	80008bc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e067      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001626:	e05f      	b.n	80016e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e05e      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d157      	bne.n	80016e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001650:	f7ff f934 	bl	80008bc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f930 	bl	80008bc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e03f      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x7a4>
 8001676:	e037      	b.n	80016e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d02d      	beq.n	80016da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001688:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80016a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff f903 	bl	80008bc <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f8ff 	bl	80008bc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e00e      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_RCC_OscConfig+0x82c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x806>
 80016d8:	e006      	b.n	80016e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e005      	b.n	80016ea <HAL_RCC_OscConfig+0x836>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0c8      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d910      	bls.n	8001738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0207 	bic.w	r2, r3, #7
 800171e:	4961      	ldr	r1, [pc, #388]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b0      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d04c      	beq.n	80017de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d107      	bne.n	800175c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174c:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d121      	bne.n	800179c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e09e      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d107      	bne.n	8001774 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d115      	bne.n	800179c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e092      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e086      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e07e      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 0203 	bic.w	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	493f      	ldr	r1, [pc, #252]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ae:	f7ff f885 	bl	80008bc <HAL_GetTick>
 80017b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f881 	bl	80008bc <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e066      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 020c 	and.w	r2, r3, #12
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	429a      	cmp	r2, r3
 80017dc:	d1eb      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	492c      	ldr	r1, [pc, #176]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d210      	bcs.n	800182c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4924      	ldr	r1, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1b0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e036      	b.n	800189a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4918      	ldr	r1, [pc, #96]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4910      	ldr	r1, [pc, #64]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800186a:	f000 f825 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe ffc4 	bl	800081c <HAL_InitTick>
 8001894:	4603      	mov	r3, r0
 8001896:	72fb      	strb	r3, [r7, #11]

  return status;
 8001898:	7afb      	ldrb	r3, [r7, #11]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08002004 	.word	0x08002004
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d121      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11e      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e005      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d102      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	e004      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d101      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_RCC_GetSysClockFreq+0x114>)
 800193e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d134      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0xa6>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d003      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xac>
 800195c:	e005      	b.n	800196a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001960:	617b      	str	r3, [r7, #20]
      break;
 8001962:	e005      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001966:	617b      	str	r3, [r7, #20]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	617b      	str	r3, [r7, #20]
      break;
 800196e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	3301      	adds	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	fb02 f203 	mul.w	r2, r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	0e5b      	lsrs	r3, r3, #25
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	3301      	adds	r3, #1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019b0:	69bb      	ldr	r3, [r7, #24]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08002014 	.word	0x08002014
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e8:	f7ff fa00 	bl	8000dec <HAL_PWREx_GetVoltageRange>
 80019ec:	6178      	str	r0, [r7, #20]
 80019ee:	e014      	b.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff f9f0 	bl	8000dec <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d10b      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d919      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a2c:	d902      	bls.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e013      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e010      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d902      	bls.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a40:	2303      	movs	r3, #3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e00a      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d102      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e004      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d101      	bne.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fdf2 	bl	80006a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 f8fc 	bl	8001ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_ConfigClockSource+0x18>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0b5      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x184>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b78:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b80:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b92:	d03e      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0xd4>
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	f200 8087 	bhi.w	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba0:	f000 8085 	beq.w	8001cae <HAL_TIM_ConfigClockSource+0x170>
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba8:	d87f      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001baa:	2b70      	cmp	r3, #112	; 0x70
 8001bac:	d01a      	beq.n	8001be4 <HAL_TIM_ConfigClockSource+0xa6>
 8001bae:	2b70      	cmp	r3, #112	; 0x70
 8001bb0:	d87b      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bb2:	2b60      	cmp	r3, #96	; 0x60
 8001bb4:	d050      	beq.n	8001c58 <HAL_TIM_ConfigClockSource+0x11a>
 8001bb6:	2b60      	cmp	r3, #96	; 0x60
 8001bb8:	d877      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bba:	2b50      	cmp	r3, #80	; 0x50
 8001bbc:	d03c      	beq.n	8001c38 <HAL_TIM_ConfigClockSource+0xfa>
 8001bbe:	2b50      	cmp	r3, #80	; 0x50
 8001bc0:	d873      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d058      	beq.n	8001c78 <HAL_TIM_ConfigClockSource+0x13a>
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d86f      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bca:	2b30      	cmp	r3, #48	; 0x30
 8001bcc:	d064      	beq.n	8001c98 <HAL_TIM_ConfigClockSource+0x15a>
 8001bce:	2b30      	cmp	r3, #48	; 0x30
 8001bd0:	d86b      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d060      	beq.n	8001c98 <HAL_TIM_ConfigClockSource+0x15a>
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d867      	bhi.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d05c      	beq.n	8001c98 <HAL_TIM_ConfigClockSource+0x15a>
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d05a      	beq.n	8001c98 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001be2:	e062      	b.n	8001caa <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f000 f948 	bl	8001e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	609a      	str	r2, [r3, #8]
      break;
 8001c10:	e04e      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f000 f931 	bl	8001e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c34:	609a      	str	r2, [r3, #8]
      break;
 8001c36:	e03b      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f000 f8a5 	bl	8001d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2150      	movs	r1, #80	; 0x50
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f8fe 	bl	8001e52 <TIM_ITRx_SetConfig>
      break;
 8001c56:	e02b      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f000 f8c4 	bl	8001df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2160      	movs	r1, #96	; 0x60
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f8ee 	bl	8001e52 <TIM_ITRx_SetConfig>
      break;
 8001c76:	e01b      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	461a      	mov	r2, r3
 8001c86:	f000 f885 	bl	8001d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f8de 	bl	8001e52 <TIM_ITRx_SetConfig>
      break;
 8001c96:	e00b      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f8d5 	bl	8001e52 <TIM_ITRx_SetConfig>
        break;
 8001ca8:	e002      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001caa:	bf00      	nop
 8001cac:	e000      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <TIM_Base_SetConfig+0xbc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d003      	beq.n	8001cec <TIM_Base_SetConfig+0x20>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cea:	d108      	bne.n	8001cfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <TIM_Base_SetConfig+0xbc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00b      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d007      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <TIM_Base_SetConfig+0xc0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d003      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <TIM_Base_SetConfig+0xc4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d108      	bne.n	8001d30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <TIM_Base_SetConfig+0xbc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_Base_SetConfig+0xa0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <TIM_Base_SetConfig+0xc0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_Base_SetConfig+0xa0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <TIM_Base_SetConfig+0xc4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d103      	bne.n	8001d74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40012c00 	.word	0x40012c00
 8001d8c:	40014000 	.word	0x40014000
 8001d90:	40014400 	.word	0x40014400

08001d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f023 0201 	bic.w	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f023 030a 	bic.w	r3, r3, #10
 8001dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	621a      	str	r2, [r3, #32]
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b087      	sub	sp, #28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	f023 0210 	bic.w	r2, r3, #16
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	031b      	lsls	r3, r3, #12
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	621a      	str	r2, [r3, #32]
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f043 0307 	orr.w	r3, r3, #7
 8001e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	021a      	lsls	r2, r3, #8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e04f      	b.n	8001f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d004      	beq.n	8001f54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10c      	bne.n	8001f6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40014000 	.word	0x40014000

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	4d0d      	ldr	r5, [pc, #52]	; (8001fcc <__libc_init_array+0x38>)
 8001f98:	4c0d      	ldr	r4, [pc, #52]	; (8001fd0 <__libc_init_array+0x3c>)
 8001f9a:	1b64      	subs	r4, r4, r5
 8001f9c:	10a4      	asrs	r4, r4, #2
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	4d0b      	ldr	r5, [pc, #44]	; (8001fd4 <__libc_init_array+0x40>)
 8001fa6:	4c0c      	ldr	r4, [pc, #48]	; (8001fd8 <__libc_init_array+0x44>)
 8001fa8:	f000 f820 	bl	8001fec <_init>
 8001fac:	1b64      	subs	r4, r4, r5
 8001fae:	10a4      	asrs	r4, r4, #2
 8001fb0:	2600      	movs	r6, #0
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	08002044 	.word	0x08002044
 8001fd0:	08002044 	.word	0x08002044
 8001fd4:	08002044 	.word	0x08002044
 8001fd8:	08002048 	.word	0x08002048

08001fdc <memset>:
 8001fdc:	4402      	add	r2, r0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <memset+0xa>
 8001fe4:	4770      	bx	lr
 8001fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fea:	e7f9      	b.n	8001fe0 <memset+0x4>

08001fec <_init>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	bf00      	nop
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr

08001ff8 <_fini>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	bf00      	nop
 8001ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffe:	bc08      	pop	{r3}
 8002000:	469e      	mov	lr, r3
 8002002:	4770      	bx	lr
