
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ffc  08001ffc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ffc  08001ffc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ffc  08001ffc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002010  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002010  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e1  00000000  00000000  0002ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5f8  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b66b  00000000  00000000  0004d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c19ff  00000000  00000000  000586e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  0011a138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001fa4 	.word	0x08001fa4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001fa4 	.word	0x08001fa4

080001cc <LCD_PutNibble>:
#define LCD_D4 5 	// GPIO pin for DB 4
#define LCD_D5 6 	// GPIO pin for DB 5
#define LCD_D6 7 	// GPIO pin for DB 6
#define LCD_D7 2 	// GPIO pin for DB 7

void LCD_PutNibble(uint8_t c) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]

	if (c & 0x8)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 0308 	and.w	r3, r3, #8
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d008      	beq.n	80001f2 <LCD_PutNibble+0x26>
		LCD_Port->ODR |= 1<<LCD_D7;
 80001e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6153      	str	r3, [r2, #20]
 80001f0:	e007      	b.n	8000202 <LCD_PutNibble+0x36>
	else
		LCD_Port->ODR &= ~(1<<LCD_D7);
 80001f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fc:	f023 0304 	bic.w	r3, r3, #4
 8000200:	6153      	str	r3, [r2, #20]

	if (c & 0x4)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	2b00      	cmp	r3, #0
 800020a:	d008      	beq.n	800021e <LCD_PutNibble+0x52>
		LCD_Port->ODR |= 1<<LCD_D6;
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800021a:	6153      	str	r3, [r2, #20]
 800021c:	e007      	b.n	800022e <LCD_PutNibble+0x62>
	else
		LCD_Port->ODR &= ~(1<<LCD_D6);
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800022c:	6153      	str	r3, [r2, #20]

	if (c & 0x2)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	2b00      	cmp	r3, #0
 8000236:	d008      	beq.n	800024a <LCD_PutNibble+0x7e>
		LCD_Port->ODR |= 1<<LCD_D5;
 8000238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000246:	6153      	str	r3, [r2, #20]
 8000248:	e007      	b.n	800025a <LCD_PutNibble+0x8e>
	else
		LCD_Port->ODR &= ~(1<<LCD_D5);
 800024a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000258:	6153      	str	r3, [r2, #20]

	if (c & 0x1)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d008      	beq.n	8000276 <LCD_PutNibble+0xaa>
		LCD_Port->ODR |= 1<<LCD_D4;
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6153      	str	r3, [r2, #20]
	else
		LCD_Port->ODR &= ~(1<<LCD_D4);

}
 8000274:	e007      	b.n	8000286 <LCD_PutNibble+0xba>
		LCD_Port->ODR &= ~(1<<LCD_D4);
 8000276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000280:	f023 0320 	bic.w	r3, r3, #32
 8000284:	6153      	str	r3, [r2, #20]
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <LCD_Pulse>:

void LCD_Pulse(void) {
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0

	LCD_Port->ODR |= 1<<LCD_EN;
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6153      	str	r3, [r2, #20]
	HAL_Delay(4);
 80002a6:	2004      	movs	r0, #4
 80002a8:	f000 faf0 	bl	800088c <HAL_Delay>
	LCD_Port->ODR &= ~(1<<LCD_EN);
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f023 0310 	bic.w	r3, r3, #16
 80002ba:	6153      	str	r3, [r2, #20]
	HAL_Delay(4);
 80002bc:	2004      	movs	r0, #4
 80002be:	f000 fae5 	bl	800088c <HAL_Delay>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c) {
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b082      	sub	sp, #8
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]

	// RS: 0 = command, 1 = data
	LCD_Port->ODR &= ~(1<<LCD_RS);
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f023 0302 	bic.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]

	// Send Upper 4 bits
	LCD_PutNibble( c >> 4 );
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	091b      	lsrs	r3, r3, #4
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff70 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 80002ec:	f7ff ffd1 	bl	8000292 <LCD_Pulse>

	// Send Lower 4 bits
	LCD_PutNibble( c & 0xF );
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff67 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 80002fe:	f7ff ffc8 	bl	8000292 <LCD_Pulse>

	// Return to default
	LCD_Port->ODR |= 1<<LCD_RS;
 8000302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	6153      	str	r3, [r2, #20]
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <LCD_SendData>:

void LCD_SendData(uint8_t c) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]

	// RS defaults to 1
	// No need to change RS

	// Send Upper 4 bits
	LCD_PutNibble( c >> 4 );
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	091b      	lsrs	r3, r3, #4
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff4e 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 8000330:	f7ff ffaf 	bl	8000292 <LCD_Pulse>

	// Send Lower 4 bits
	LCD_PutNibble( c & 0xF );
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff45 	bl	80001cc <LCD_PutNibble>
	LCD_Pulse();
 8000342:	f7ff ffa6 	bl	8000292 <LCD_Pulse>

}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <LCD_Init>:

void LCD_Init(void) {
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000352:	2014      	movs	r0, #20
 8000354:	f000 fa9a 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x30);
 8000358:	2030      	movs	r0, #48	; 0x30
 800035a:	f7ff ffb4 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(5);
 800035e:	2005      	movs	r0, #5
 8000360:	f000 fa94 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x30);
 8000364:	2030      	movs	r0, #48	; 0x30
 8000366:	f7ff ffae 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f000 fa8e 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x30);
 8000370:	2030      	movs	r0, #48	; 0x30
 8000372:	f7ff ffa8 	bl	80002c6 <LCD_SendCmd>

	// 4 bit mode
	HAL_Delay(20);
 8000376:	2014      	movs	r0, #20
 8000378:	f000 fa88 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x20);
 800037c:	2020      	movs	r0, #32
 800037e:	f7ff ffa2 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(20);
 8000382:	2014      	movs	r0, #20
 8000384:	f000 fa82 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x2C);
 8000388:	202c      	movs	r0, #44	; 0x2c
 800038a:	f7ff ff9c 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(20);
 800038e:	2014      	movs	r0, #20
 8000390:	f000 fa7c 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x08);
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff ff96 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(20);
 800039a:	2014      	movs	r0, #20
 800039c:	f000 fa76 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x01);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f7ff ff90 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(20);
 80003a6:	2014      	movs	r0, #20
 80003a8:	f000 fa70 	bl	800088c <HAL_Delay>
	LCD_SendCmd(0x06);
 80003ac:	2006      	movs	r0, #6
 80003ae:	f7ff ff8a 	bl	80002c6 <LCD_SendCmd>
	HAL_Delay(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f000 fa69 	bl	800088c <HAL_Delay>

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}

080003be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c2:	f000 f9ee 	bl	80007a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c6:	f000 f852 	bl	800046e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ca:	f000 f8eb 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003ce:	f000 f895 	bl	80004fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80003d2:	f7ff ffbc 	bl	800034e <LCD_Init>
  LCD_SendData(0x86);
 80003d6:	2086      	movs	r0, #134	; 0x86
 80003d8:	f7ff ff9f 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 80003dc:	2064      	movs	r0, #100	; 0x64
 80003de:	f000 fa55 	bl	800088c <HAL_Delay>
  LCD_SendData(0x86);
 80003e2:	2086      	movs	r0, #134	; 0x86
 80003e4:	f7ff ff99 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	; 0x64
 80003ea:	f000 fa4f 	bl	800088c <HAL_Delay>
  LCD_SendData(0x56);
 80003ee:	2056      	movs	r0, #86	; 0x56
 80003f0:	f7ff ff93 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 80003f4:	2064      	movs	r0, #100	; 0x64
 80003f6:	f000 fa49 	bl	800088c <HAL_Delay>
  LCD_SendData(0xC6);
 80003fa:	20c6      	movs	r0, #198	; 0xc6
 80003fc:	f7ff ff8d 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fa43 	bl	800088c <HAL_Delay>
  LCD_SendData(0xC6);
 8000406:	20c6      	movs	r0, #198	; 0xc6
 8000408:	f7ff ff87 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 800040c:	2064      	movs	r0, #100	; 0x64
 800040e:	f000 fa3d 	bl	800088c <HAL_Delay>
  LCD_SendData(0xF6);
 8000412:	20f6      	movs	r0, #246	; 0xf6
 8000414:	f7ff ff81 	bl	800031a <LCD_SendData>

  HAL_Delay(100);
 8000418:	2064      	movs	r0, #100	; 0x64
 800041a:	f000 fa37 	bl	800088c <HAL_Delay>
  LCD_SendData(0x50);
 800041e:	2050      	movs	r0, #80	; 0x50
 8000420:	f7ff ff7b 	bl	800031a <LCD_SendData>

  HAL_Delay(100);
 8000424:	2064      	movs	r0, #100	; 0x64
 8000426:	f000 fa31 	bl	800088c <HAL_Delay>
  LCD_SendData(0x86);
 800042a:	2086      	movs	r0, #134	; 0x86
 800042c:	f7ff ff75 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 fa2b 	bl	800088c <HAL_Delay>
  LCD_SendData(0x56);
 8000436:	2056      	movs	r0, #86	; 0x56
 8000438:	f7ff ff6f 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fa25 	bl	800088c <HAL_Delay>
  LCD_SendData(0xC6);
 8000442:	20c6      	movs	r0, #198	; 0xc6
 8000444:	f7ff ff69 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 8000448:	2064      	movs	r0, #100	; 0x64
 800044a:	f000 fa1f 	bl	800088c <HAL_Delay>
  LCD_SendData(0xC6);
 800044e:	20c6      	movs	r0, #198	; 0xc6
 8000450:	f7ff ff63 	bl	800031a <LCD_SendData>
  HAL_Delay(100);
 8000454:	2064      	movs	r0, #100	; 0x64
 8000456:	f000 fa19 	bl	800088c <HAL_Delay>
  LCD_SendData(0xF6);
 800045a:	20f6      	movs	r0, #246	; 0xf6
 800045c:	f7ff ff5d 	bl	800031a <LCD_SendData>

  HAL_Delay(100);
 8000460:	2064      	movs	r0, #100	; 0x64
 8000462:	f000 fa13 	bl	800088c <HAL_Delay>
  LCD_SendCmd(0x08);
 8000466:	2008      	movs	r0, #8
 8000468:	f7ff ff2d 	bl	80002c6 <LCD_SendCmd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046c:	e7fe      	b.n	800046c <main+0xae>

0800046e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b096      	sub	sp, #88	; 0x58
 8000472:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2244      	movs	r2, #68	; 0x44
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fd89 	bl	8001f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000482:	463b      	mov	r3, r7
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000490:	2310      	movs	r3, #16
 8000492:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800049c:	2360      	movs	r3, #96	; 0x60
 800049e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fcdf 	bl	8000e6c <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80004b4:	f000 f8a6 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
 80004ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 f8eb 	bl	80016ac <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004dc:	f000 f892 	bl	8000604 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004e4:	f000 fc6c 	bl	8000dc0 <HAL_PWREx_ControlVoltageScaling>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004ee:	f000 f889 	bl	8000604 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3758      	adds	r7, #88	; 0x58
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_TIM1_Init+0xa0>)
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_TIM1_Init+0xa4>)
 800051e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_TIM1_Init+0xa0>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_TIM1_Init+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_TIM1_Init+0xa0>)
 800052e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_TIM1_Init+0xa0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_TIM1_Init+0xa0>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_TIM1_Init+0xa0>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000546:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_TIM1_Init+0xa0>)
 8000548:	f001 fa7e 	bl	8001a48 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000552:	f000 f857 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <MX_TIM1_Init+0xa0>)
 8000564:	f001 fac7 	bl	8001af6 <HAL_TIM_ConfigClockSource>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800056e:	f000 f849 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_TIM1_Init+0xa0>)
 8000584:	f001 fc7c 	bl	8001e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800058e:	f000 f839 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028
 80005a0:	40012c00 	.word	0x40012c00

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80005d0:	2200      	movs	r2, #0
 80005d2:	21fe      	movs	r1, #254	; 0xfe
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fbcc 	bl	8000d74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80005dc:	23fe      	movs	r3, #254	; 0xfe
 80005de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f000 fa54 	bl	8000aa0 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6613      	str	r3, [r2, #96]	; 0x60
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	6593      	str	r3, [r2, #88]	; 0x58
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x44>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_TIM_Base_MspInit+0x38>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d10b      	bne.n	8000682 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_TIM_Base_MspInit+0x3c>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a09      	ldr	r2, [pc, #36]	; (8000694 <HAL_TIM_Base_MspInit+0x3c>)
 8000670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_TIM_Base_MspInit+0x3c>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40012c00 	.word	0x40012c00
 8000694:	40021000 	.word	0x40021000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f8b2 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <SystemInit+0x5c>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <SystemInit+0x5c>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <SystemInit+0x60>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a11      	ldr	r2, [pc, #68]	; (800074c <SystemInit+0x60>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <SystemInit+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <SystemInit+0x60>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <SystemInit+0x60>)
 8000718:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800071c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000720:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <SystemInit+0x60>)
 8000724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000728:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <SystemInit+0x60>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <SystemInit+0x60>)
 8000730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000734:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <SystemInit+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	40021000 	.word	0x40021000

08000750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000788 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff ffca 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000758:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800075a:	e003      	b.n	8000764 <LoopCopyDataInit>

0800075c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800075e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000760:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000762:	3104      	adds	r1, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000768:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800076a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800076c:	d3f6      	bcc.n	800075c <CopyDataInit>
	ldr	r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000770:	e002      	b.n	8000778 <LoopFillZerobss>

08000772 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000772:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000774:	f842 3b04 	str.w	r3, [r2], #4

08000778 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <LoopForever+0x16>)
	cmp	r2, r3
 800077a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800077c:	d3f9      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f001 fbe5 	bl	8001f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000782:	f7ff fe1c 	bl	80003be <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000788:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800078c:	08002004 	.word	0x08002004
	ldr	r0, =_sdata
 8000790:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000794:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800079c:	20000078 	.word	0x20000078

080007a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_IRQHandler>

080007a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f943 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f80e 	bl	80007d4 <HAL_InitTick>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	e001      	b.n	80007c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c4:	f7ff ff24 	bl	8000610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_InitTick+0x6c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d023      	beq.n	8000830 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_InitTick+0x70>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_InitTick+0x6c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f941 	bl	8000a86 <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10f      	bne.n	800082a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d809      	bhi.n	8000824 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f919 	bl	8000a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_InitTick+0x74>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e007      	b.n	8000834 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e004      	b.n	8000834 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e001      	b.n	8000834 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	20000000 	.word	0x20000000
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x20>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x24>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_IncTick+0x24>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008
 8000870:	20000074 	.word	0x20000074

08000874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_GetTick+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000074 	.word	0x20000074

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff ffee 	bl	8000874 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffde 	bl	8000874 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff47 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5c 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb0 	bl	80009f4 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e148      	b.n	8000d42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 813a 	beq.w	8000d3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d00b      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d007      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0xea>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d123      	bne.n	8000bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	08da      	lsrs	r2, r3, #3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3208      	adds	r2, #8
 8000b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	6939      	ldr	r1, [r7, #16]
 8000bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0203 	and.w	r2, r3, #3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 8094 	beq.w	8000d3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c2c:	4a4d      	ldr	r2, [pc, #308]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1d4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1d0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a42      	ldr	r2, [pc, #264]	; (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1cc>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1d6>
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1d6>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1d6>
 8000c74:	2300      	movs	r3, #0
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c86:	4937      	ldr	r1, [pc, #220]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f47f aeaf 	bne.w	8000ab0 <HAL_GPIO_Init+0x10>
  }
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
 8000d80:	4613      	mov	r3, r2
 8000d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d84:	787b      	ldrb	r3, [r7, #1]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_PWREx_GetVoltageRange+0x18>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dce:	d130      	bne.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ddc:	d038      	beq.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de6:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2232      	movs	r2, #50	; 0x32
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e04:	e002      	b.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d102      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1f2      	bne.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2c:	d110      	bne.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e00f      	b.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3e:	d007      	beq.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e48:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40007000 	.word	0x40007000
 8000e64:	20000000 	.word	0x20000000
 8000e68:	431bde83 	.word	0x431bde83

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f000 bc11 	b.w	80016a2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e80:	4ba0      	ldr	r3, [pc, #640]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e8a:	4b9e      	ldr	r3, [pc, #632]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80e4 	beq.w	800106a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x4c>
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b0c      	cmp	r3, #12
 8000eac:	f040 808b 	bne.w	8000fc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	f040 8087 	bne.w	8000fc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x64>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e3e8      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	4b8b      	ldr	r3, [pc, #556]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <HAL_RCC_OscConfig+0x7e>
 8000ee0:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee8:	e005      	b.n	8000ef6 <HAL_RCC_OscConfig+0x8a>
 8000eea:	4b86      	ldr	r3, [pc, #536]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d223      	bcs.n	8000f42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fd42 	bl	8001988 <RCC_SetFlashLatencyFromMSIRange>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e3c9      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7c      	ldr	r2, [pc, #496]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4977      	ldr	r1, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2c:	4b75      	ldr	r3, [pc, #468]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	4972      	ldr	r1, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
 8000f40:	e025      	b.n	8000f8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f42:	4b70      	ldr	r3, [pc, #448]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6f      	ldr	r2, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	496a      	ldr	r1, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	4965      	ldr	r1, [pc, #404]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd02 	bl	8001988 <RCC_SetFlashLatencyFromMSIRange>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e389      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f8e:	f000 fc6f 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	495a      	ldr	r1, [pc, #360]	; (8001108 <HAL_RCC_OscConfig+0x29c>)
 8000fa0:	5ccb      	ldrb	r3, [r1, r3]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	4a58      	ldr	r2, [pc, #352]	; (800110c <HAL_RCC_OscConfig+0x2a0>)
 8000fac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fc0e 	bl	80007d4 <HAL_InitTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d052      	beq.n	8001068 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	e36d      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d032      	beq.n	8001034 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fce:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fc4b 	bl	8000874 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fc47 	bl	8000874 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e356      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff4:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a3f      	ldr	r2, [pc, #252]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	493a      	ldr	r1, [pc, #232]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	4935      	ldr	r1, [pc, #212]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
 8001032:	e01a      	b.n	800106a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a32      	ldr	r2, [pc, #200]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc18 	bl	8000874 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001048:	f7ff fc14 	bl	8000874 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e323      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x1dc>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d073      	beq.n	800115e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x21c>
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d10e      	bne.n	80010a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d063      	beq.n	800115c <HAL_RCC_OscConfig+0x2f0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d15f      	bne.n	800115c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e300      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d106      	bne.n	80010b8 <HAL_RCC_OscConfig+0x24c>
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0x288>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x270>
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0x288>
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <HAL_RCC_OscConfig+0x298>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01b      	beq.n	8001134 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fbba 	bl	8000874 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001102:	e010      	b.n	8001126 <HAL_RCC_OscConfig+0x2ba>
 8001104:	40021000 	.word	0x40021000
 8001108:	08001fbc 	.word	0x08001fbc
 800110c:	20000000 	.word	0x20000000
 8001110:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fbae 	bl	8000874 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e2bd      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001126:	4baf      	ldr	r3, [pc, #700]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0x2a8>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fb9e 	bl	8000874 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fb9a 	bl	8000874 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e2a9      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114e:	4ba5      	ldr	r3, [pc, #660]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x2d0>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d060      	beq.n	800122c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x310>
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d119      	bne.n	80011aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d116      	bne.n	80011aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x328>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e286      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b93      	ldr	r3, [pc, #588]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4990      	ldr	r1, [pc, #576]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a8:	e040      	b.n	800122c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d023      	beq.n	80011fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a8b      	ldr	r2, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011be:	f7ff fb59 	bl	8000874 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fb55 	bl	8000874 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e264      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d8:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	061b      	lsls	r3, r3, #24
 80011f2:	497c      	ldr	r1, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e018      	b.n	800122c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fa:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fb35 	bl	8000874 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fb31 	bl	8000874 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e240      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001220:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d03c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d01c      	beq.n	800127a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001246:	4a67      	ldr	r2, [pc, #412]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001250:	f7ff fb10 	bl	8000874 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001258:	f7ff fb0c 	bl	8000874 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e21b      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126a:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ef      	beq.n	8001258 <HAL_RCC_OscConfig+0x3ec>
 8001278:	e01b      	b.n	80012b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff faf3 	bl	8000874 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff faef 	bl	8000874 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1fe      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ef      	bne.n	8001292 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80a6 	beq.w	800140c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10d      	bne.n	80012ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e8:	2301      	movs	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_RCC_OscConfig+0x57c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d118      	bne.n	800132a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x57c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <HAL_RCC_OscConfig+0x57c>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001304:	f7ff fab6 	bl	8000874 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fab2 	bl	8000874 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1c1      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_RCC_OscConfig+0x57c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <HAL_RCC_OscConfig+0x4d8>
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001342:	e024      	b.n	800138e <HAL_RCC_OscConfig+0x522>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d110      	bne.n	800136e <HAL_RCC_OscConfig+0x502>
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800136c:	e00f      	b.n	800138e <HAL_RCC_OscConfig+0x522>
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d016      	beq.n	80013c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fa6d 	bl	8000874 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fa69 	bl	8000874 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e176      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x578>)
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ed      	beq.n	800139e <HAL_RCC_OscConfig+0x532>
 80013c2:	e01a      	b.n	80013fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa56 	bl	8000874 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa52 	bl	8000874 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d906      	bls.n	80013ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e15f      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	4baa      	ldr	r3, [pc, #680]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e8      	bne.n	80013cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001400:	4ba5      	ldr	r3, [pc, #660]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	4aa4      	ldr	r2, [pc, #656]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d03c      	beq.n	8001492 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01c      	beq.n	800145a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001426:	4a9c      	ldr	r2, [pc, #624]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fa20 	bl	8000874 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001438:	f7ff fa1c 	bl	8000874 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e12b      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144a:	4b93      	ldr	r3, [pc, #588]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800144c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ef      	beq.n	8001438 <HAL_RCC_OscConfig+0x5cc>
 8001458:	e01b      	b.n	8001492 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800145a:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800145c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001460:	4a8d      	ldr	r2, [pc, #564]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fa03 	bl	8000874 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001472:	f7ff f9ff 	bl	8000874 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e10e      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ef      	bne.n	8001472 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8102 	beq.w	80016a0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	f040 80c5 	bne.w	8001630 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014a6:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d12c      	bne.n	8001514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	3b01      	subs	r3, #1
 80014c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d123      	bne.n	8001514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d11b      	bne.n	8001514 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d113      	bne.n	8001514 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	3b01      	subs	r3, #1
 80014fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d109      	bne.n	8001514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d067      	beq.n	80015e4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d062      	beq.n	80015e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0bb      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800152a:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a5a      	ldr	r2, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001534:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001536:	f7ff f99d 	bl	8000874 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff f999 	bl	8000874 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0a8      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155c:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0x830>)
 8001562:	4013      	ands	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800156c:	3a01      	subs	r2, #1
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	4311      	orrs	r1, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001576:	0212      	lsls	r2, r2, #8
 8001578:	4311      	orrs	r1, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800157e:	0852      	lsrs	r2, r2, #1
 8001580:	3a01      	subs	r2, #1
 8001582:	0552      	lsls	r2, r2, #21
 8001584:	4311      	orrs	r1, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800158a:	0852      	lsrs	r2, r2, #1
 800158c:	3a01      	subs	r2, #1
 800158e:	0652      	lsls	r2, r2, #25
 8001590:	4311      	orrs	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001596:	06d2      	lsls	r2, r2, #27
 8001598:	430a      	orrs	r2, r1
 800159a:	493f      	ldr	r1, [pc, #252]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a39      	ldr	r2, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015b8:	f7ff f95c 	bl	8000874 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff f958 	bl	8000874 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e067      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015de:	e05f      	b.n	80016a0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e05e      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d157      	bne.n	80016a0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001608:	f7ff f934 	bl	8000874 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f930 	bl	8000874 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e03f      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x7a4>
 800162e:	e037      	b.n	80016a0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d02d      	beq.n	8001692 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800163c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001640:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001654:	f023 0303 	bic.w	r3, r3, #3
 8001658:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001660:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff f903 	bl	8000874 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff f8ff 	bl	8000874 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e00e      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_RCC_OscConfig+0x82c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x806>
 8001690:	e006      	b.n	80016a0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e005      	b.n	80016a2 <HAL_RCC_OscConfig+0x836>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0c8      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d910      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4961      	ldr	r1, [pc, #388]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b0      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d04c      	beq.n	8001796 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d121      	bne.n	8001754 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e09e      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d107      	bne.n	800172c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d115      	bne.n	8001754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e092      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e086      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e07e      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 0203 	bic.w	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	493f      	ldr	r1, [pc, #252]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001766:	f7ff f885 	bl	8000874 <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176c:	e00a      	b.n	8001784 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176e:	f7ff f881 	bl	8000874 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e066      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 020c 	and.w	r2, r3, #12
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	429a      	cmp	r2, r3
 8001794:	d1eb      	bne.n	800176e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	492c      	ldr	r1, [pc, #176]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d210      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4924      	ldr	r1, [pc, #144]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_ClockConfig+0x1b0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e036      	b.n	8001852 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4918      	ldr	r1, [pc, #96]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4910      	ldr	r1, [pc, #64]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001822:	f000 f825 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_ClockConfig+0x1b4>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490c      	ldr	r1, [pc, #48]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe ffc4 	bl	80007d4 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001850:	7afb      	ldrb	r3, [r7, #11]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
 8001864:	08001fbc 	.word	0x08001fbc
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d121      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d11e      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e005      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018cc:	4a2b      	ldr	r2, [pc, #172]	; (800197c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	e004      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_RCC_GetSysClockFreq+0x114>)
 80018f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d134      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0xa6>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d003      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0xac>
 8001914:	e005      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_RCC_GetSysClockFreq+0x110>)
 8001918:	617b      	str	r3, [r7, #20]
      break;
 800191a:	e005      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_GetSysClockFreq+0x114>)
 800191e:	617b      	str	r3, [r7, #20]
      break;
 8001920:	e002      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	617b      	str	r3, [r7, #20]
      break;
 8001926:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	fb02 f203 	mul.w	r2, r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	0e5b      	lsrs	r3, r3, #25
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	3301      	adds	r3, #1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001968:	69bb      	ldr	r3, [r7, #24]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	08001fcc 	.word	0x08001fcc
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019a0:	f7ff fa00 	bl	8000da4 <HAL_PWREx_GetVoltageRange>
 80019a4:	6178      	str	r0, [r7, #20]
 80019a6:	e014      	b.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6593      	str	r3, [r2, #88]	; 0x58
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019c0:	f7ff f9f0 	bl	8000da4 <HAL_PWREx_GetVoltageRange>
 80019c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d10b      	bne.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d919      	bls.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2ba0      	cmp	r3, #160	; 0xa0
 80019e4:	d902      	bls.n	80019ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019e6:	2302      	movs	r3, #2
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e013      	b.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ec:	2301      	movs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	e010      	b.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	d902      	bls.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019f8:	2303      	movs	r3, #3
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	e00a      	b.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d102      	bne.n	8001a0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	e004      	b.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b70      	cmp	r3, #112	; 0x70
 8001a0e:	d101      	bne.n	8001a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a10:	2301      	movs	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 0207 	bic.w	r2, r3, #7
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e049      	b.n	8001aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe fdf2 	bl	8000658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 f8fc 	bl	8001c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_ConfigClockSource+0x18>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e0b5      	b.n	8001c7a <HAL_TIM_ConfigClockSource+0x184>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b38:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4a:	d03e      	beq.n	8001bca <HAL_TIM_ConfigClockSource+0xd4>
 8001b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b50:	f200 8087 	bhi.w	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b58:	f000 8085 	beq.w	8001c66 <HAL_TIM_ConfigClockSource+0x170>
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b60:	d87f      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b62:	2b70      	cmp	r3, #112	; 0x70
 8001b64:	d01a      	beq.n	8001b9c <HAL_TIM_ConfigClockSource+0xa6>
 8001b66:	2b70      	cmp	r3, #112	; 0x70
 8001b68:	d87b      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b6a:	2b60      	cmp	r3, #96	; 0x60
 8001b6c:	d050      	beq.n	8001c10 <HAL_TIM_ConfigClockSource+0x11a>
 8001b6e:	2b60      	cmp	r3, #96	; 0x60
 8001b70:	d877      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b72:	2b50      	cmp	r3, #80	; 0x50
 8001b74:	d03c      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0xfa>
 8001b76:	2b50      	cmp	r3, #80	; 0x50
 8001b78:	d873      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d058      	beq.n	8001c30 <HAL_TIM_ConfigClockSource+0x13a>
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	d86f      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b82:	2b30      	cmp	r3, #48	; 0x30
 8001b84:	d064      	beq.n	8001c50 <HAL_TIM_ConfigClockSource+0x15a>
 8001b86:	2b30      	cmp	r3, #48	; 0x30
 8001b88:	d86b      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d060      	beq.n	8001c50 <HAL_TIM_ConfigClockSource+0x15a>
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	d867      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d05c      	beq.n	8001c50 <HAL_TIM_ConfigClockSource+0x15a>
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d05a      	beq.n	8001c50 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b9a:	e062      	b.n	8001c62 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f000 f948 	bl	8001e40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
      break;
 8001bc8:	e04e      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f000 f931 	bl	8001e40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bec:	609a      	str	r2, [r3, #8]
      break;
 8001bee:	e03b      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f000 f8a5 	bl	8001d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2150      	movs	r1, #80	; 0x50
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f8fe 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c0e:	e02b      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f000 f8c4 	bl	8001daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2160      	movs	r1, #96	; 0x60
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f8ee 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c2e:	e01b      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f000 f885 	bl	8001d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f8de 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c4e:	e00b      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 f8d5 	bl	8001e0a <TIM_ITRx_SetConfig>
        break;
 8001c60:	e002      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001c62:	bf00      	nop
 8001c64:	e000      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <TIM_Base_SetConfig+0xbc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <TIM_Base_SetConfig+0x20>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca2:	d108      	bne.n	8001cb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <TIM_Base_SetConfig+0xbc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <TIM_Base_SetConfig+0x52>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d007      	beq.n	8001cd6 <TIM_Base_SetConfig+0x52>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <TIM_Base_SetConfig+0xc0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0x52>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <TIM_Base_SetConfig+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <TIM_Base_SetConfig+0xbc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d007      	beq.n	8001d24 <TIM_Base_SetConfig+0xa0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <TIM_Base_SetConfig+0xc0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <TIM_Base_SetConfig+0xa0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <TIM_Base_SetConfig+0xc4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d103      	bne.n	8001d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	615a      	str	r2, [r3, #20]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40014400 	.word	0x40014400

08001d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0201 	bic.w	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f023 030a 	bic.w	r3, r3, #10
 8001d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	621a      	str	r2, [r3, #32]
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	f023 0210 	bic.w	r2, r3, #16
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	031b      	lsls	r3, r3, #12
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	621a      	str	r2, [r3, #32]
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f043 0307 	orr.w	r3, r3, #7
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	021a      	lsls	r2, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e04f      	b.n	8001f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001ec8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d004      	beq.n	8001f0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10c      	bne.n	8001f26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40014000 	.word	0x40014000

08001f4c <__libc_init_array>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	4d0d      	ldr	r5, [pc, #52]	; (8001f84 <__libc_init_array+0x38>)
 8001f50:	4c0d      	ldr	r4, [pc, #52]	; (8001f88 <__libc_init_array+0x3c>)
 8001f52:	1b64      	subs	r4, r4, r5
 8001f54:	10a4      	asrs	r4, r4, #2
 8001f56:	2600      	movs	r6, #0
 8001f58:	42a6      	cmp	r6, r4
 8001f5a:	d109      	bne.n	8001f70 <__libc_init_array+0x24>
 8001f5c:	4d0b      	ldr	r5, [pc, #44]	; (8001f8c <__libc_init_array+0x40>)
 8001f5e:	4c0c      	ldr	r4, [pc, #48]	; (8001f90 <__libc_init_array+0x44>)
 8001f60:	f000 f820 	bl	8001fa4 <_init>
 8001f64:	1b64      	subs	r4, r4, r5
 8001f66:	10a4      	asrs	r4, r4, #2
 8001f68:	2600      	movs	r6, #0
 8001f6a:	42a6      	cmp	r6, r4
 8001f6c:	d105      	bne.n	8001f7a <__libc_init_array+0x2e>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f74:	4798      	blx	r3
 8001f76:	3601      	adds	r6, #1
 8001f78:	e7ee      	b.n	8001f58 <__libc_init_array+0xc>
 8001f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7e:	4798      	blx	r3
 8001f80:	3601      	adds	r6, #1
 8001f82:	e7f2      	b.n	8001f6a <__libc_init_array+0x1e>
 8001f84:	08001ffc 	.word	0x08001ffc
 8001f88:	08001ffc 	.word	0x08001ffc
 8001f8c:	08001ffc 	.word	0x08001ffc
 8001f90:	08002000 	.word	0x08002000

08001f94 <memset>:
 8001f94:	4402      	add	r2, r0
 8001f96:	4603      	mov	r3, r0
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <memset+0xa>
 8001f9c:	4770      	bx	lr
 8001f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa2:	e7f9      	b.n	8001f98 <memset+0x4>

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
